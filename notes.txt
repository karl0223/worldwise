Make Scrollbar invisible

scrollbar-color: transparent transparent;

--------------------------------

Install React with Vite

npm create-vite@latest

enter project name
framework : React
variant: JavaScript or any

Run npm install inside the project folder to install dependencies

--------------------------------

# To run a Fake API 

npm i json-server       - latest version

npm i json-server@0     - Install this to use the delay

# Add this to the script in package.json 

"server": "json-server --watch data/cities.json --port 8000 --delay 500"     - delay is not available in the latest version of json-server

# Run the server

npm run server
--------------------------------

# Configure Eslint

Run:
npm install eslint vite-plugin-eslint eslint-config-react-app --save-dev

# Create new file in src

".eslintrc.json"      -- file name

{
    "extends" : "react-app"
}


# In vite.config.js file

import eslint from "vite-plugin-eslint";

export default defineConfig({
  plugins: [react(), eslint()],
});

--------------------------------

# Install React Router

npm i react-router-dom

# Structure  -- BrowserRouter -> Routes -> Route -> input path(url) and element(component)

function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Homepage />} />
        <Route path="products" element={<Products />} />
        <Route path="pricing" element={<Pricing />} />
        <Route path="*" element={<PageNotFound />} />       --- Catches all paths(urls) does not in the routes
      </Routes>
    </BrowserRouter>
  )
}

--------------------------------

# Create Link to different pages

- You can use either NavLink or Link

import { NavLink, Link } from "react-router-dom"

<NavLink to=""> link </NavLink>   --- set the class to active (know what page is active)
<Link to=""> link </Link>

--------------------------------

# Using CSS module

# Naming convention 

componentName.module.css    --- PageNav.module.css

# To set global css

:global(.className)         --- :global(.active) || .nav :global(.active)

--------------------------------

# Nested Router

# Add the nested route(children) inside the parent route

<Route path="app" element={<AppLayout />}>                    - parent route
    <Route path="cities" element={<p>cities</p>} />           - children route
    <Route path="countries" element={<p>countries</p>} />     - children route
    <Route path="form" element={<p>form</p>} />               - children route
</Route>

# To use the children route, Use <Outlet /> in the components

import { Outlet } from 'react-router-dom'
<Outlet />

# To set a default route to render, Use "index element"

<Route index element={<Homepage />} />

<Route index element={<p>dashboard</p>} />

--------------------------------

# Dynamic Routes with URL -- Nested URL

# useParams to access the url parameters
-- City.jsx file

<Route
  path="cities/:id"                                 -- Nested URL
  element={<City flagEmoji={flagemojiToPNG} />}
/>

import { useParams } from "react-router-dom";

  const { id } = useParams();

--------------------------------

# Saving State in the URL

# Add the query string in the to={} in Link
-- CityItem.jsx file

<Link to={`${id}?lat=${position.lat}&lng=${position.lng}`} ></Link>

# Reading and Setting Query String

import { useSearchParams } from 'react-router-dom'

const [searchParams, setSearchParams] = useSearchParams()

# Get the query string

const lat = searchParams.get('lat')
const lng = searchParams.get('lng')

# Use setSearchParams

<button onClick={() => setSearchParams({lat: 23, lng: 50})}>Change Position</button>

--------------------------------

# Programmatic Navigation with useNavigate

-- imperative way to use navigate

import { useNavigate } from "react-router-dom";

const navigate = useNavigate();

# Use to navite to the url

<div className={styles.mapContainer} onClick={() => navigate("form")}>     ---- "form" url path
    <h1>Map</h1>
    <h1>{lat}, {lng}</h1>
    <button onClick={() => setSearchParams({lat: 23, lng: 50})}>Change Position</button>
</div>

# Use to go back for move forward by step

<Button
  type="back"
  onClick={(e) => {
    e.preventDefault();
    navigate(-1);             ---- Go back 1 step "-1" (denote a number to the number of steps)
  }}
>
  &larr; Back
</Button>

--------------------------------

# Declarative way to use Navigate

import { Navigate } from "react-router-dom";

<Route index element={<Navigate replace to="cities" />} />    --- redirect the page to "cities" url. use "replace" to access the move back button

--------------------------------

